name: CI/CD Docker

# 트리거를 수행할 브랜치를 지정합니다.
on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

# 환경설정
env:
  DOCKER_IMAGE: ghcr.io/${{ github.actor }}/noleftovers-server
  VERSION: ${{ github.sha }}
  NAME: go_cicd

jobs:
  # 빌드 Job
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      # github repository에서 checkout / 현재 상태의 소스코드를 가상의 컨테이너 안으로 checkout
      - uses: actions/checkout@v2
      # docker build 수행 / 가상의 컨테이너 안에 docker가 돌아갈 수 있는 환경을 설치
      - name: Set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      # GitHub 컨테이너 레지스트리에 생성한 토큰을 이용해 GHCR에 로그인
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}
      # 해당 GHCR로 Docker image를 만들고(build) push
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          # 컨텍스트는 Docker가 이미지를 빌드할 때 필요한 파일 및 디렉토리의 집합을 의미 / 파일은 Dockerfile의 경로를 지정
          context: ./nodejs-docker
          # file: ./koview-server/Dockerfile.prod
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest
  # 배포 Job
  deploy:
  # Deploy는 GHCR에 로그인 후 저장되어 있는 Docker image를 이용해 컨테이너를 실행시키는 역할
  # runs-on 중 self-hosted는 필수로 써야한다.(이 값을 설정해야 서버에 등록한 runner가 실행된다.) / 이 부분에서 어느 Runner(EC2)로 실행할지 지정해줘야 한다.
    needs: build  # build 후에 실행되도록 정의
    name: Deploy
    runs-on: [ self-hosted, label-go ] # AWS ./configure에서 사용할 label명
    steps:
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}
      # 3000 -> 80 포트로 수행하도록 지정
      # 실행 중인 도커 컨테이너를 중지하고 이전 버전인 컨테이너와 이미지를 삭제 후 새로운 이미지로 컨테이너를 run
      - name: Docker run
        run: |
          docker stop ${{ env.NAME }} || true
          docker rm ${{ env.NAME }} || true
          docker rmi ${{ env.DOCKER_IMAGE }}:latest || true
          docker run -d -p 80:8000 --name go_cicd --restart always \
            -e RDS_HOST=${{ secrets.RDS_HOST }} \
            -e RDS_PORT=${{ secrets.RDS_PORT }} \
            -e RDS_USER=${{ secrets.RDS_USER }} \
            -e RDS_PASSWORD=${{ secrets.RDS_PASSWORD }} \
            -e RDS_DB_NAME=${{ secrets.RDS_DB_NAME }} \
            ${{ env.DOCKER_IMAGE }}:latest
